[{"path":"https://phacochr.github.io/phacochr/articles/anonymous_geocoding.html","id":"géocodage-au-secteur-statistique","dir":"Articles","previous_headings":"","what":"Géocodage au secteur statistique","title":"Géocodage anonymisé","text":"phacochr d’abord été pensé pour fonctionner en local : il devait donc être léger, rapide et portable. Cette spécificité permet notamment de géocoder des données sensibles qui ne peuvent pas être envoyées sur un serveur via une API de géocodage. Des options supplémentaires ont de ce fait été intégrées afin d’anonymiser les données qui lui sont passées. Nous en montrons un exemple sur cette page. Partons des données d’exemples snacks contenues dans phacochr, et imaginons que nous voulons produire une information spatiale un tant soi peu précise à partir de ces données, mais en ne donnant pas d’indication de l’adresse. La fonction phaco_geocode() doit alors prendre l’argument anonymous = TRUE (par défaut réglé sur FALSE): Cette option la particularité de produire des coordonnées X-Y qui ne sont pas celles de l’adresse, mais du centroïde du secteur statistique où se trouve celle-ci (les données des entités administratives - secteurs statistiques, communes… - sont quant à elles ajoutées sans changement). Toutes les informations relatives à l’adresse précise ne sont pas renseignées dans le résultat : la rue détectée, son identifiant, les corrections orthographiques éventuellement apportées, le numéro de la rue BeST avec lequel la jointure est réalisée, la langue d’écriture de la rue… Les colonnes fournies en entrée sont également supprimées : dans cet exemple, les colonnes de la base de données originale contenant la rue et le numéro (rue et num) ne sont pas reprises dans les résultats. Cette suppression permet de produire rapidement un résultat géolocalisé au niveau du secteur statistique, tout en étant anonymisé. Autrement dit, cette option permet que la géolocalisation et l’adresse ne cohabitent jamais dans le même fichier.","code":"library(phacochr)  result_anonym <- phaco_geocode(data_to_geocode = snacks,                                colonne_num = \"num\",                                colonne_rue = \"rue\",                                colonne_code_postal = \"code_postal\",                                anonymous = TRUE) c(\"num\", \"rue\") %in% names(result_anonym$data_geocoded) #> [1] FALSE FALSE"},{"path":"https://phacochr.github.io/phacochr/articles/anonymous_geocoding.html","id":"cartographie-anonymisée","dir":"Articles","previous_headings":"","what":"Cartographie anonymisée","title":"Géocodage anonymisé","text":"Lorsque cette option est enclenchée, une nouvelle colonne phaco_anonymous est ajoutée au résultat. La présence de cette colonne indique à la fonction phaco_map_s() que celle-ci doit changer sa manière de cartographier les résultats. Dans la mesure où les adresses sont localisées au centroïde du secteur statistique, les points se superposeraient dans la cartographie classiquement prévue par phaco_map_s(). Dans le cas d’une anonymisation, ce sont alors des cercles de taille proportionnelle au nombre d’adresses localisées dans le secteur statistique qui sont affichées. L’anonymisation n’empêche donc pas une cartographie exploratoire rapide des résultats :","code":"phaco_map_s(result_anonym$data_geocoded_sf,             title_carto = \"Snacks à Bruxelles (anonymisés)\")"},{"path":"https://phacochr.github.io/phacochr/articles/data_phacochr.html","id":"données-séparées","dir":"Articles","previous_headings":"","what":"Données séparées","title":"Structure et mise à jour des données BeST","text":"Le package phacochr la particularité de ne pas contenir directement les données nécessaires au géocodage. C’est la raison pour laquelle il faut lancer la fonction phaco_setup_data() après l’installation du package pour que les fonctions du package puissent fonctionner : La fonction phaco_setup_data() télécharge les fichiers nécessaires (90Mo), qui sont alors décompressés et stockés de manière permanente dans un répertoire de travail sur l’ordinateur. Une fois décompressés, ces fichiers occupent une place de 265Mo sur le disque dur. Le chemin du répertoire dépend du système d’exploitation ; il est renseigné par la fonction lors de l’installation. Pour Windows, ce chemin est C:\\Users\\USERNAME\\AppData\\Local\\phacochr. Voici en résumé ce que contiennent ces fichiers. L’utilisateur/trice peut consulter le répertoire d’installation pour prendre connaissance plus précisément de leur contenu. Attention : ces fichier ne peuvent pas être modifiés ! Le fait que les données ne soient pas intégrées deux avantages : Il permettra de soumettre notre package au dépôt CRAN, la taille des packages acceptés étant limitée. Il donne à l’utilisateur/trice la possibilité de mettre à jour lui/elle-même les données. Nous développons cet élément dans le point suivant.","code":"# Charger phacochr library(phacochr)  # Installer les données nécessaires à phacochr phaco_setup_data()"},{"path":"https://phacochr.github.io/phacochr/articles/data_phacochr.html","id":"mise-à-jour-des-données","dir":"Articles","previous_headings":"","what":"Mise à jour des données","title":"Structure et mise à jour des données BeST","text":"Bien que phacochr repose essentiellement sur les données BeST, les données utilisées par le package ne sont pas directement celles que l’peut télécharger sur le site où elles sont mises à disposition : https://opendata.bosa./. Les données BeST sur lesquelles est construit phacochr sont en effet transformées dans le d’ajouter des options au, et d’augmenter la vitesse du géocodage. Ces opérations sont réalisées par le package lui-même à travers la fonction phaco_best_data_update(). Voici quelques éléments constituant les transformations opérées. L’utilisateur/trice peut prendre connaissance de l’ensemble de ces transformations en consultant le code de la fonction phaco_best_data_update() sur Github. La distinction de numéros de boite différents pour le même numéro de rue est supprimée. Par exemple, les numéros 52a et 52b sont tous deux ramenés au 52. Les rues sont doublées par langue, pour simplifier l’écriture du code de la fonction de géocodage. C’est notamment le cas pour Bruxelles, dont toutes les rues sont traduites en français et néérlandais. La même rue bruxelloise est sonc située sur deux lignes dans la base de données (une en fr, l’autre en nl). Les numéros de rue avec coordonnées manquantes sont supprimées. Ce problème de coordonnées manquantes concerne uniquement la Wallonie. Les coordonnées des milieux de rues sont calculées. Des alias des rues avec prénoms sont créés pour que celles-ci existent dans une version avec prénom abrégé (les rues étant usuellement écrites de cette manière). Des corrections orthographiques sont apportées aux données BeST. Le formatage des adresses BEST n’est en effet pas toujours homogène : celles-ci contiennent des précisions entre parenthèses, des abréviations (Av. pour “Avenue”, St. pour “Saint”), etc. qui nuisent potentiellement à la bonne détection des rues. Par défaut, des corrections sont donc apportées. Par cohérence, la correction orthographique des données à géocoder - dans la fonction phaco_geocode() - est également activée par défaut. Cette correction des données BeST est désactivable via l’argument correction_REGEX = FALSE de la fonction phaco_best_data_update(). Les secteurs statistiques sont ajoutés aux données BeST à l’aide d’une jointure spatiale avec les données vectorielles de Statbel. C’est par le biais des secteurs statistiques que les autres informations administratives (quartiers du monitoring de Bruxelles, (sous-)communes…) sont ajoutées aux adresses géocodées en fin de géocodage. La table secteurs statistiques - quartiers du monitoring de Bruxelles est quant à elle réalisée via une jointure spatiale des centroïdes des secteurs statistiques Statbel aux géométries Urbis des quartiers du monitoring. De ce fait, les quartiers du monitoring épousent les limites spatiales des secteurs statistiques Statbel. Les fichiers BeST sont simplifiés au maximum afin d’augmenter la vitesse du géocodage. Les fichiers BeST originaux font 960Mo ; nous les avons réduits à 140Mo. Nous avons notamment diminué la précision des coordonnées au mètre pour diminuer la taille des fichiers. Les fichiers sont en outre scindés par arrondissement, afin de pouvoir charger uniquement les fichiers nécessaires lors du géocodage, réduisant significativement le temps de chargement pour géocoder les bases de données d’adresses ne couvrant pas tout le territoire belge. La fonction phaco_best_data_update() télécharge les dernières données BeST sur le site officiel, les transforme, y intègre les secteurs statistiques à partir des données vectorielles de Statbel et sauvegarde le résultat dans le répertoire de travail de phacochr pour être utilisées lors du géocodage. En outre, la fonction crée toutes les tables de conversion nécessaires au géocodage. Toutes ces tables étant réalisées à la volée par la fonction, elles sont modifiables très facilement (en cas de refonte des secteurs statistiques, de changement des géométries, etc.). Cette manière de faire l’avantage majeur que l’utilisateur/trice peut réaliser lui/elle-même la mise à jour des données. Les données BeST sont en effet mises à jour de manière hebdomadaire, et il aurait été beaucoup trop contraignant pour nous de mettre le package à jour toutes les semaines pour suivre ce rythme. La fonction de mise à jour se lance simplement de cette façon : La fonction détecte automatiquement si les données installées ont plus d’une semaine, pour éviter de faire une mise à jour pour rien. Si c’est bien le cas, elle procède alors aux téléchargements et calculs nécessaires pour créer les données. Les opérations sont nombreuses et peuvent prendre une dizaine de minutes pour être réalisées. L’avancement des opérations est indiqué par différents messages successifs dans la console. Les autres données (par exemple les données vectorielles Statbel et Urbis) ne peuvent pas être mises à jour par l’utilisateur. Leur mise à disposition n’étant pas faite à une URL fixe, l’automatisation est moins facile. Cependant, leur actualisation étant beaucoup moins fréquente, nous (les développeurs de phacochr) nous chargeons de les intégrer au package dès qu’un changement se présentera.","code":"phaco_best_data_update()"},{"path":"https://phacochr.github.io/phacochr/articles/data_phacochr.html","id":"précision-du-géocodage","dir":"Articles","previous_headings":"","what":"Précision du géocodage","title":"Structure et mise à jour des données BeST","text":"L’utilisateur/trice peut par ailleurs choisir le degré de précision des coordonnées X-Y lors de cette mise à jour avec le paramètre précision (par défaut réglé sur \"m\" - mètre). Si l’utilisateur/trice veut changer le degré de précision alors que les données ont moins d’une semaine, il/elle doit indiquer l’argument force = TRUE, forçant la mise à jour. Attention : augmenter le degré de précision diminue la vitesse de géocodage. Les arguments possibles de la fonction sont renseignés dans le dictionnaire des fonctions.","code":"phaco_best_data_update(precision = \"cm\",                        force = TRUE)"},{"path":"https://phacochr.github.io/phacochr/articles/geocoding_logic.html","id":"formatage-des-données","dir":"Articles","previous_headings":"","what":"1) Formatage des données","title":"Logique du géocodage","text":"Le programme détecte d’abord la configuration des données à géocoder, et créé les colonnes nettoyées de numéro de rue (si disponible, ce qui est souvent le cas), de rue et de code postal. Des corrections sont faites pour chacun de ces champs, afin de maximiser les chances de trouver l’adresse dans la suite des opérations.","code":""},{"path":"https://phacochr.github.io/phacochr/articles/geocoding_logic.html","id":"détection-des-rues","dir":"Articles","previous_headings":"","what":"2) Détection des rues","title":"Logique du géocodage","text":"phacochr procède alors à une jointure inexacte entre chacune des rues (nettoyées au point précédent) et l’ensemble des rue de BeST Address au sein du code postal indiqué. Un matching inexact est nécessaire pour pouvoir apparier la rue des données BeST (disons Rue Belliard au code postal 1040) avec la même rue telle qu’elle est écrite concrètement dans la base de données à géocoder, potentiellement avec des coquilles ou fautes d’orthographe (par exemple Rue Beliar avec un seul l et sans d, également au code postal 1040). Le matching inexact est parallélisé sur les n-1 cores du CPU afin d’augmenter la vitesse du traitement (de nombreuses combinaisons devant être calculées). Le paramètre error_max permet d’indiquer l’erreur acceptable par l’utilisateur. Celle-ci est réglée par défaut à 4, ce qui permet de trouver des rues mal orthographiées, sans les confondre avec d’autres, avec un très bon taux de succès. Augmenter ce paramètre accroît le pourcentage de rues trouvées, mais aussi d’erreurs réalisées. Dans le cas où la langue dans laquelle les adresses sont inscrites est connue, elle peut être renseignée via l’argument lang_encoded, ce qui augmente la vitesse et la fiabilité du processus en limitant le matching à la langue définie. Si la rue n’est pas trouvée, le programme étend sa recherche à la commune entière et à toutes les communes limitrophes. Cette procédure optionnelle peut être désactivée avec le paramètre elargissement_com_adj = FALSE.","code":""},{"path":"https://phacochr.github.io/phacochr/articles/geocoding_logic.html","id":"jointure-avec-les-coordonnées-géographiques","dir":"Articles","previous_headings":"","what":"3) Jointure avec les coordonnées géographiques","title":"Logique du géocodage","text":"Une fois les rues trouvées, il est désormais possible de réaliser une jointure exacte avec les données BeST géolocalisées au niveau du numéro, celles-ci comprenant les coordonnées X-Y de l’ensemble des adresses en Belgique. Pour ce faire, seuls les arrondissements dans lesquels sont présents les codes postaux des données à géocoder sont chargés en RAM, pour augmenter la vitesse du traitement et soulager l’ordinateur. Les coordonnées des adresses qui ne sont pas trouvées sont approximées en trouvant les coordonnées connues de l’adresse la plus proche du même côté de la rue. L’amplitude maximale de cette approximation est réglable avec le paramètre approx_num_max (réglé par défaut à 50 ; indiquer 0 pour désactiver l’approximation). Dans le cas où les coordonnées ne sont pas trouvées, ce sont celles du numéro médian de la rue (proxy du milieu de la rue) qui sont indiquées (option activée par défaut et désactivable avec l’argument mid_street = FALSE). Si les données ne possèdent pas de numéro, c’est cette information qui est indiquée comme résultat du géocodage. Le tableau ci-dessous schématise l’ensemble des opérations réalisées et expliquées précédemment :","code":""},{"path":"https://phacochr.github.io/phacochr/articles/performances.html","id":"performances","dir":"Articles","previous_headings":"","what":"Performances","title":"Performances et fiabilité","text":"Nous présentons ici quelques mesures des performances de phacochr. Nous avons réalisé des tests sur 18 bases de données réelles fournies par des collègues (merci à elles et eux). La vitesse d’exécution par adresse suit une fonction inverse (1/x). phacochr est bien meilleur avec un nombre conséquent d’adresses. Ceci vient entre autre du fait qu’il doit charger des données volumineuses avant de réaliser les traitements : le “coût” marginal en temps de ce chargement est d’autant plus faible que les données sont nombreuses à géocoder. partir de 2000 adresses, la vitesse d’exécution se situe entre 0,4 et 0,8 secondes / 100 adresses sur un PC de puissance moyenne. titre d’exemple, sur ce même PC, 2 adresses sont trouvées en 16s, géocoder 300 adresses prend environ 20s, 1000 adresses 25s, 20 000 adresses 140s.  phacochr possède une bonne capacité à trouver les adresses. Sur le même set de 18 bases de données, la médiane du pourcentage d’adresses trouvées est de 97%. Pour 7 bases de données sur les 18, phacochr trouve les coordonnées à plus de 98%, pour 6 bases de données entre 96% et 98% et pour 5 bases de données entre 90% et 96%.","code":""},{"path":"https://phacochr.github.io/phacochr/articles/performances.html","id":"fiabilité","dir":"Articles","previous_headings":"","what":"Fiabilité","title":"Performances et fiabilité","text":"Pour mesurer la fiabilité de phacochr, Nous avons mesuré la distance (euclidienne, en mètres) entre la géolocalisation opérée par phacochr avec ses réglages par défaut et les coordonnées spatiales déjà présentes dans deux bases de données : celle des écoles néérlandophones et celle des pharmacies, les deux pour toute la Belgique. Cette distance peut être interprétée comme l’erreur dans la géolocalisation (bien qu’il est possible que les coordonnées déjà présentes dans ces deux bases de données ne soient pas précises : nous n’avons pas investigué la manière dont elles ont été produites). Le tableau suivant montre la répartition en pourcentages de cette erreur par classe de distance. voit ainsi que 97,6% des adresses géocodées sont localisées à moins de 100m de leurs coordonnées “réelles”, montrant un degré de fiabilité tout à fait satisfaisant.","code":""},{"path":"https://phacochr.github.io/phacochr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Joel Gires. Author, maintainer. Hugo Perilleux. Author.","code":""},{"path":"https://phacochr.github.io/phacochr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Gires J, Perilleux H (2023). phacochr: Geocoder Belgium - Geocodeur pour la Belgique. https://phacochr.github.io/phacochr/, https://github.com/phacochr.","code":"@Manual{,   title = {phacochr: Geocoder for Belgium - Geocodeur pour la Belgique},   author = {Joel Gires and Hugo Perilleux},   year = {2023},   note = {https://phacochr.github.io/phacochr/, https://github.com/phacochr}, }"},{"path":"https://phacochr.github.io/phacochr/index.html","id":"phacochr-","dir":"","previous_headings":"","what":"Geocoder for Belgium - Geocodeur pour la Belgique","title":"Geocoder for Belgium - Geocodeur pour la Belgique","text":"phacochr est un géocodeur pour la Belgique sous forme de package R. Son principe est de produire, à partir d’une base de données d’adresses, une série d’informations nécessaires pour l’analyse spatiale : les coordonnées X-Y mais également d’autres informations utiles comme le secteur statistique ou le quartier du monitoring pour Bruxelles. Le niveau de précision du géocodage est celui du bâtiment. Le package est très rapide pour géocoder de longues listes (la vitesse d’exécution se situe entre 0,4 et 0,8 secondes pour 100 adresses sur un ordinateur de puissance moyenne) et le taux de succès pour le géocodage est élevé (médiane de 97%). Voir la page Performances et fiabilité pour le détail des performances. Par ailleurs, le géocodage est réalisé entièrement en local, permettant une confidentialité maximale dans le cas d’adresses qui ne peuvent pas être envoyées sur des serveurs externes (permettant notamment un Géocodage anonymisé). phacochr constitue donc une alternative très performante face aux solutions existantes tout en reposant entièrement sur des données publiques et des procédures libres. Le programme fonctionne avec les données publiques BeST Address compilées par BOSA à partir des données régionales Urbis (Région de Bruxelles-Capitale), CRAB (Région flamande) et ICAR (Région wallonne). La logique de phacochr est de réaliser une jointure inexacte entre la liste à géocoder et les données BeST Address grâce aux fonctions des packages R fuzzyjoin et stringdist. phacochr dispose de plusieurs options : il peut notamment réaliser des corrections orthographiques (en français et néérlandais) préalables à la détection des rues ou procéder au géocodage au numéro le plus proche - de préférence du même côté de la rue - si les coordonnées du numéro indiqué sont inconnues (par exemple si l’adresse n’existe plus). En cas de non disponibilité du numéro de la rue, le programme indique les coordonnées du numéro médian de la rue. phacochr est compatible avec les 3 langues nationales : il géocode des adresses écrites en français, néérlandais ou allemand. Note de développement: Cette version de phacochr est encore une version de développement. Elle est néanmoins pleinement fonctionnelle et passé l’épreuve de nombreux tests, au cours desquels des solutions ont été apportées aux problèmes posés par des structures de données diverses. La mise à disposition publique du package nous permettra de bénéficier de retours plus larges concernant des problèmes que nous n’aurions pas anticipés. Nous passerons phacochr en version 1.0 lorsque nous serons assurés que le package est suffisamment solide pour faire face à un grand nombre de situations. Néanmoins, dans un de continuité d’utilisation, la logique d’utilisation de phacochr ne changera plus. Seuls quelques éléments seront encore certainement modifiés dans un avenir proche : il s’agit des noms des colonnes créées et des noms des arguments des fonctions, qui seront harmonisés et simplifiés, sans que cela impacte l’utilisation du programme.","code":""},{"path":"https://phacochr.github.io/phacochr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Geocoder for Belgium - Geocodeur pour la Belgique","text":"Vous pouvez installer le package phacochr depuis GitHub. Pour cela, il vous faut d’abord installer et charger le package devtools : Il est indispensable lors de la première utilisation d’installer les données nécessaires à son utilisation via la fonction phaco_setup_data(). Ces fichiers (+/- 265Mo) sont téléchargés et stockés de manière permanente dans un répertoire de travail sur l’ordinateur (dépendant du système d’exploitation et renseigné par la fonction lors de l’installation). Il est également possible pour l’utilisateur de mettre à jour lui-même les données BeST Address (actualisées de manière hebdomadaire par BOSA) vers les dernières données disponibles en ligne avec la fonction phaco_best_data_update(). Voir la page dédiée à la structure et la mise à jour des données pour plus de précisions.","code":"# Installer devtools si celui-ci n'est pas installé et charger le package install.packages(\"devtools\") library(devtools)  # Installer phacochr devtools::install_github(\"phacochr/phacochr\") # Charger phacochr library(phacochr)  # Installer les données nécessaires à phacochr phaco_setup_data() phaco_best_data_update()"},{"path":"https://phacochr.github.io/phacochr/index.html","id":"exemple-de-géocodage","dir":"","previous_headings":"","what":"Exemple de géocodage","title":"Geocoder for Belgium - Geocodeur pour la Belgique","text":"Voici un exemple de géocodage à partir des données d’exemples snacks contenues dans phacochr : Il s’agit des snacks à Bruxelles. Le géocodage se lance simplement avec la fonction phaco_geocode() appliquée au data.frame. Nous indiquons dans cet exemple 3 paramètres : les colonnes contenant la rue, le numéro de rue et le code postal, disponibles séparément dans la base de données. Il s’agit de la situation idéale, mais le programme est compatible avec d’autres configurations : celles-ci sont renseignée plus bas au point Format des données à géocoder. Mentionnons déjà que le numéro peut ne pas être renseigné ; phacochr trouve alors les coordonnées du numéro médian de la rue au code postal indiqué. La fonction dispose de plusieurs options, voir le dictionnaire des fonctions : https://phacochr.github.io/phacochr/reference/index.html. Un tableau synthétisant quelques résultats du géocodage est affiché à la fin de l’opération. Une version complète de ces résultats est accessible dans l’objet summary créé par phaco_geocode() : Résumé du géocodage Le package dispose également d’une fonction de cartographie des adresses géocodées (reposant sur le packageR mapsf et des shapefiles intégrés aux données téléchargées). phaco_map_s() produit des cartes statiques à partir des données géocodées : il suffit de passer à la fonction l’objet data_geocoded_sf créé précédemment par phaco_geocode(). La fonction dessine alors les coordonnées des adresses sur une carte dont les frontières administratives sont également affichées. Si les adresses se restreignent à Bruxelles, la carte se limite automatiquement à la Région bruxelloise, comme c’est le cas pour cet exemple. Les options de la fonction sont également renseignées dans le dictionnaire des fonctions.","code":"head(snacks, 8) #> # A tibble: 8 × 4 #>   nom                   rue                         num   code_postal #>   <chr>                 <chr>                       <chr> <chr>       #> 1 Snack Baraka          Boulevard Maurice Lemonnier 32    1000        #> 2 Snack Les frères      Rue Marie-Christine         121   1020        #> 3 Snack Adil            Rue Marie-Christine         132   1020        #> 4 Efes Fritures         Rue Marie-Christine         66    1020        #> 5 Snack 2001            Rue Marie-Christine         28    1020        #> 6 snack friterie Chérif Rue Stéphanie               165   1020        #> 7 Chez les grecs        Rue Marie-Christine         44    1020        #> 8 Snack fransman        Rue Fransman                39    1020 result <- phaco_geocode(data_to_geocode = snacks,                         colonne_num = \"num\",                         colonne_rue = \"rue\",                         colonne_code_postal = \"code_postal\") result$data_geocoded [1:8,c(\"nom\", \"x_31370\", \"y_31370\", \"cd_sector\")] #>                     nom x_31370 y_31370 cd_sector #> 1          Snack Baraka  148367  170405 21004A03- #> 2      Snack Les frères  148897  173945 21004E70- #> 3            Snack Adil  148904  173910 21004E70- #> 4         Efes Fritures  149115  173779 21004E72- #> 5            Snack 2001  149226  173709 21004E72- #> 6 snack friterie Chérif  148605  174121 21004E70- #> 7        Chez les grecs  149171  173744 21004E72- #> 8        Snack fransman  148389  174242 21004E74- knitr::kable(result$summary[2:nrow(result$summary), c(\"Region\", \"n\", \"Valid rue(%)\", \"Rue detect.(%valid)\", \"Approx.(n)\", \"Elarg.(n)\", \"Mid.(n)\", \"Geocode(%valid)\", \"Geocode(%tot)\")],   caption = \"Résumé du géocodage\" ) phaco_map_s(result$data_geocoded_sf,             title_carto = \"Snacks à Bruxelles\")"},{"path":"https://phacochr.github.io/phacochr/index.html","id":"format-des-données-à-géocoder","dir":"","previous_headings":"","what":"Format des données à géocoder","title":"Geocoder for Belgium - Geocodeur pour la Belgique","text":"phacochr est compatible avec cinq formats concernant les données à géocoder. Dans chacun de ces formats, le programme procède à différentes corrections pour obtenir les informations nécessaires au géocodage. Les tableaux ci-dessous schématisent les différentes configurations envisageables, indiquent différents exemples à partir d’une même adresse (le 71 rue Belliard, 1040 Bruxelles) et mentionnent des notes pour que l’utilisateur comprenne ce que fait le programme. 1. Le numéro de rue, la rue et le code postal sont présents dans des colonnes séparées dans les données à géocoder : il s’agit du format idéal qui rencontrera le meilleur résultat. Dans ce cas, il faut renseigner les arguments colonne_num, colonne_rue et colonne_code_postal. 2. Le numéro de rue et la rue sont mélangés dans une colonne, et le code postal est seul dans une autre : ce format demande de renseigner les arguments colonne_num_rue et colonne_code_postal. Dans ce format, phacochr reconstitue à l’aide des expressions régulières (REGEX) la rue et le numéro dans des colonnes séparées. Cette procédure fonctionne très bien la plupart du temps. Il faut cependant respecter une règle importante : le numéro de rue doit être le premier numéro indiqué dans la colonne colonne_num_rue. Un numéro de boite (ou autre numéro) ne peut par exemple pas précéder le numéro de rue (cas cependant peu courant). 3. Le numéro de rue, la rue et le code postal sont intégrés dans la même colonne : dans ce format, il faut renseigner l’argument colonne_num_rue_code_postal. Le géocodeur reconstitue le numéro de rue, la rue (comme la situation précédente) mais aussi le code postal dans des colonnes séparées. Cette situation fonctionne également très bien, à condition d’observer cette règle : le numéro doit être le premier nombre et le code postal être en fin de champ (situations les plus courantes). 4. La rue et le code postal sont présents dans des colonnes séparées (sans numéro) : cette situation ressemble à la première, mais sans que le numéro soit disponible. phacochr géocode alors non pas à un niveau de précision du bâtiment, mais choisi comme coordonnées de résultat le bâtiment disposant du numéro médian de la rue au sein du même code postal (certaines rues traversant différents codes postaux). Ce format demande de renseigner les arguments colonne_rue et colonne_code_postal. 5. La rue et le code postal sont intégrés dans la même colonne (sans numéro) : le programme reconstitue la rue et le code postal dans des colonnes séparées (comme la situation 3). Dans ce cas, le code postal doit être en fin de champ. Lorsque ce n’est pas le cas, le programme ne fonctionne pas (situation peu courante). Ce format demande de renseigner l’argument colonne_rue_code_postal.","code":""},{"path":"https://phacochr.github.io/phacochr/index.html","id":"résultats-et-vérification-du-géocodage","dir":"","previous_headings":"","what":"Résultats et vérification du géocodage","title":"Geocoder for Belgium - Geocodeur pour la Belgique","text":"Notre fonction de géocodage phaco_geocode() consiste à réaliser une multitude d’opérations à la suite pour pouvoir associer la bonne adresse des données BeST (comprenant les coordonnées) à chaque adresse encodée, malgré la présence potentielle de fautes d’orthographe ou de coquilles. Nous renvoyons à la page Logique du géocodage pour mieux comprendre les opérations effectuées, et donc savoir déterminer les meilleurs réglages en fonction de la structure spécifique des données à géocoder. l’issue du processus, le géocodage produit un dataframe identique à celui qui été introduit en entrée mais incorporant désormais de nombreuses informations spatiales. Les principales sont les coordonnées X-Y qui se trouvent dans les colonnes x_31370 et y_31370 au format Lambert 72. Outre ces coordonnées, trouve notamment (la liste complète est disponible au point Colonnes créées en fin de page) : Les secteurs statistiques (colonne cd_sector et leurs noms en NL et FR tx_sector_descr_nl et tx_sector_descr_fr) ; Les quartiers monitoring pour Bruxelles (colonne MDRC et leurs noms en NL et FR NAME_DUT et NAME_FRE ) ; Les codes INS des communes, arrondissements, provinces et regions (ainsi que leurs noms en FR et NL) dans des colonnes qui suivent les appelations classiques de Statbel ; Toute une série d’indicateurs sur la qualité de la localisation (voir plus bas). Le résultat du géocodage est une liste (au sens de R). Il comprend trois objets : data_geocoded : la base de données originale à laquelle sont ajoutées les informations précitées ; data_geocoded_sf : un objet sf produit à partir des adresses pour lesquelles des coordonnées ont effectivement été trouvées (le nombre de lignes reprises dans l’objet dépend donc du taux de géocodage). Cet objet est exportable en .gpkg (ou autre format vectoriel) à l’aide de la fonction st_write ou peut directement être cartographié avec la fonction phaco_map_s ; summary : un tableau avec quelques statistiques synthétiques indiquant la performance du géocodage. Il peut possiblement y avoir de “faux positifs” lors du géocodage, c’est-à-dire que phacochr peut parfois associer une mauvaise rue à l’adresse encodée si celle-ci est trop mal orthographiée. Ces erreurs sont normalement peu nombreuses avec les réglages par défaut : voir la page Performances et fiabilité. Pour avoir une idée de la qualité des résultats, il est malgré tout conseillé de vérifier plusieurs éléments (la synthèse des indicateurs de qualité du géocodage est disponible au point Colonnes créées ci-dessous) : Vérifier globalement que les corrections orthographiques ont bien fonctionné (la colonne rue_recoded comprend la rue nettoyée et corrigée, et recode indique les types de corrections réalisées) ; Comparer les rues détectées par phacochr (la colonne street_FINAL_detected) avec les rues d’origine pour les erreurs les plus élevées dans la jointure inexacte (la colonne dist_fuzzy indique le nombre d’erreurs nécessaires pour faire la jointure avec les données BeST. 0 signifie que le matching est exact) ; Procéder à la même comparaison pour les rues dont la détection nécessité un élargissement aux communes adjacentes (colonne type_geocoding == elargissement_adj). Une rue au même nom aurait pu être trouvée dans une commune voisine ; Vérifier dans le tableau des résultats le nombre d’adresses qui ont nécessité une localisation géographique à un autre numéro si celui renseigné n’pas été trouvé. Examinez plus spécifiquement les adresses qui ont demandé les approximations les plus amples (colonne approx_num) ; Vérifier dans le tableau des résultats le nombre d’adresses qui ont demandé une localisation au numéro médian de la rue au code postal encodé. Examinez par précaution les adresses qui ont demandé une localisation à la rue (colonne type_geocoding == mid_street).","code":""},{"path":"https://phacochr.github.io/phacochr/index.html","id":"colonnes-créées","dir":"","previous_headings":"","what":"Colonnes créées","title":"Geocoder for Belgium - Geocodeur pour la Belgique","text":"Le principe de phacochr est d’adjoindre une série d’informations à la liste d’adresses originale : il s’agit bien entendu d’informations spatiales (coordonnées X-Y et des informations administratives sur les entités spatiales) mais également d’indices sur la qualité du géocodage. En voici une liste exhaustive et commentée:","code":""},{"path":"https://phacochr.github.io/phacochr/index.html","id":"autres-géocodeurs-libres","dir":"","previous_headings":"","what":"Autres géocodeurs libres","title":"Geocoder for Belgium - Geocodeur pour la Belgique","text":"Nominatim: le géocodeur de OpenStreetMap. BHiGIS – Brussels Historical Geographical Information System: un géocodeur développé par l’IGEAT permettant de géocoder des données anciennes à Bruxelles.","code":""},{"path":"https://phacochr.github.io/phacochr/index.html","id":"contact","dir":"","previous_headings":"","what":"Contact","title":"Geocoder for Belgium - Geocodeur pour la Belgique","text":"Si vous rencontrez un bug à l’utilisation, n’hésitez pas à nous en faire part : nous désirons améliorer le programme et sommes intéressés d’avoir le maximum de retours. Les deux auteurs de ce package sont chercheurs en sociologie et en géographie ; nous ne sommes pas programmeurs de profession, et sommes donc également preneurs de toute proposition d’amélioration ! Rendez-vous dans la section ‘issues’ sur notre Github.","code":""},{"path":[]},{"path":[]},{"path":"https://phacochr.github.io/phacochr/reference/phaco_best_data_update.html","id":null,"dir":"Reference","previous_headings":"","what":"phaco_best_data_update : Mise à jour des données BeST et des fichiers connexes — phaco_best_data_update","title":"phaco_best_data_update : Mise à jour des données BeST et des fichiers connexes — phaco_best_data_update","text":"Cette fonction met à jour les données BeST Address vers la dernière version disponible sur le site de BOSA : https://opendata.bosa.ainsi que les fichiers connexes nécessaires au géocodage.","code":""},{"path":"https://phacochr.github.io/phacochr/reference/phaco_best_data_update.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"phaco_best_data_update : Mise à jour des données BeST et des fichiers connexes — phaco_best_data_update","text":"","code":"phaco_best_data_update(   force = FALSE,   precision = \"m\",   corrections_REGEX = TRUE )"},{"path":"https://phacochr.github.io/phacochr/reference/phaco_best_data_update.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"phaco_best_data_update : Mise à jour des données BeST et des fichiers connexes — phaco_best_data_update","text":"force Force la mise à jour même si les données sont à jour. Par défaut: FALSE. precision Indique la précision des coordonnées désirées. Par défaut : \"m\". Choix possibles : \"m\", \"dm\", \"cm\", \"mm\". corrections_REGEX Correction orthographique des adresses BEST. Par défaut: TRUE, car les adresses BEST ne sont pas toujours homogènes : elles contiennent des précisions entre parenthèses, des abréviations, etc. qui nuisent à la détection des rues.","code":""},{"path":"https://phacochr.github.io/phacochr/reference/phaco_best_data_update.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"phaco_best_data_update : Mise à jour des données BeST et des fichiers connexes — phaco_best_data_update","text":"","code":"if (FALSE) { phaco_best_data_update() }"},{"path":"https://phacochr.github.io/phacochr/reference/phaco_geocode.html","id":null,"dir":"Reference","previous_headings":"","what":"phaco_geocode : Géocodeur pour la Belgique — phaco_geocode","title":"phaco_geocode : Géocodeur pour la Belgique — phaco_geocode","text":"Cette fonction est la principale du package phacochr. partir d’une liste d’adresses, elle permet de retrouver leurs coordonnees X-Y.","code":""},{"path":"https://phacochr.github.io/phacochr/reference/phaco_geocode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"phaco_geocode : Géocodeur pour la Belgique — phaco_geocode","text":"","code":"phaco_geocode(   data_to_geocode,   colonne_rue = NULL,   colonne_num = NULL,   colonne_code_postal = NULL,   colonne_num_rue = NULL,   colonne_num_rue_code_postal = NULL,   colonne_rue_code_postal = NULL,   method_stringdist = \"lcs\",   corrections_REGEX = TRUE,   error_max = 4,   approx_num_max = 50,   elargissement_com_adj = TRUE,   mid_street = TRUE,   lang_encoded = c(\"FR\", \"NL\", \"DE\"),   anonymous = FALSE,   path_data = NULL )"},{"path":"https://phacochr.github.io/phacochr/reference/phaco_geocode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"phaco_geocode : Géocodeur pour la Belgique — phaco_geocode","text":"data_to_geocode Un dataframe avec les adresses geocoder. colonne_rue Nom de la colonne avec les rues. colonne_num Nom de la colonne avec les numéros. colonne_code_postal Nom de la colonne avec les codes postaux. colonne_num_rue Nom de la colonne avec numéros et rues ensemble. colonne_num_rue_code_postal Nom de la colonne avec numéros, rues et code postaux ensemble. colonne_rue_code_postal Nom de la colonne avec rues et code postaux ensemble. method_stringdist Méthode pour la jointure inexacte. Par défaut: \"lcs\". Choix possibles: \"osa\", \"lv\", \"dl\", \"hamming\", \"lcs\", \"qgram\", \"cosine\", \"jaccard\", \"jw\",\"soundex\". corrections_REGEX Correction orthographique. Par défaut: TRUE. Cette option n'est désactivable que si la rue est contenue dans une colonne séparée (c'est-à-dire qu'elle ne contient ni le numéro ni le code postal). error_max Nombre maximal d'erreurs entre le nom de la rue trouver et le nom de la rue dans la base de donnée de référence (BeST). Par défaut: TRUE. approx_num_max Nombre de numéros d'écart maximum si le numéro n'pas été trouve. Par défaut: 50. elargissement_com_adj Élargissement aux communes limitrophes. Par défaut: TRUE. mid_street Indique les coordonnées du milieu de la rue si les coordonnées du numéro ne sont pas trouvée. Par défaut: TRUE. lang_encoded Langue utilisée pour encoder les noms de rue. Par défaut: c(\"FR\", \"NL\", \"DE\"). anonymous Anonymisation des résultats en ajoutant uniquement les informations des entités administratives (secteurs statistiques, quartiers, (sous-)communes, etc.). Dans ce cas, les coordonnées X-Y indiquées sont le centroïde du secteur statistique. De plus, toutes les informations relatives à l'adresse dans les données originales sont supprimées. Par défaut: FALSE. path_data Chemin absolu vers le dossier où se trouve le données. Par défaut data_path = NULL et phacochr trouve le dossier d'installation choisi par défaut.","code":""},{"path":"https://phacochr.github.io/phacochr/reference/phaco_geocode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"phaco_geocode : Géocodeur pour la Belgique — phaco_geocode","text":"","code":"if (FALSE) { x <- data.frame(nom = c(paste0(\"Observatoire de la Sant\",\"\\u00e9\",\" et du Social\"), \"ULB\"), rue = c(\"rue Belliard\",\"avenue Antoine Depage\"), num = c(\"71\", \"30\"), code_postal = c(\"1040\",\"1000\"))  result <- phaco_geocode(data_to_geocode = x, colonne_rue = \"rue\", colonne_num = \"num\", colonne_code_postal = \"code_postal\") }"},{"path":"https://phacochr.github.io/phacochr/reference/phaco_map_s.html","id":null,"dir":"Reference","previous_headings":"","what":"phaco_map_s : Carte statique des résultats — phaco_map_s","title":"phaco_map_s : Carte statique des résultats — phaco_map_s","text":"Cette fonction produit facilement une carte statique partir de l'objet issu du geocodage.","code":""},{"path":"https://phacochr.github.io/phacochr/reference/phaco_map_s.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"phaco_map_s : Carte statique des résultats — phaco_map_s","text":"","code":"phaco_map_s(   FULL_GEOCODING_sf,   colonne_ponderation = NULL,   title_carto = \"adresses geocodees\",   filter_bxl = FALSE,   aggreg_sector = FALSE,   zoom_geocoded = FALSE,   nom_admin = TRUE )"},{"path":"https://phacochr.github.io/phacochr/reference/phaco_map_s.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"phaco_map_s : Carte statique des résultats — phaco_map_s","text":"FULL_GEOCODING_sf L'objet sf à cartographier issu de phaco_geocode(). colonne_ponderation Un poids pour les points cartographier. title_carto Le titre de la carte produite. filter_bxl Afficher uniquement Bruxelles. aggreg_sector Procède à l'agrégation des points par secteur statistique pour réaliser la cartographie. zoom_geocoded Zoomer sur les points. nom_admin Afficher les noms des entités administratives sur la carte.","code":""},{"path":"https://phacochr.github.io/phacochr/reference/phaco_setup_data.html","id":null,"dir":"Reference","previous_headings":"","what":"phaco_setup_data : Téléchargement et installation des données pour géocoder — phaco_setup_data","title":"phaco_setup_data : Téléchargement et installation des données pour géocoder — phaco_setup_data","text":"Cette fonction permet d'installer sur l'ordinateur les fichiers nécessaires pour le geocodage des adresses.","code":""},{"path":"https://phacochr.github.io/phacochr/reference/phaco_setup_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"phaco_setup_data : Téléchargement et installation des données pour géocoder — phaco_setup_data","text":"","code":"phaco_setup_data()"},{"path":"https://phacochr.github.io/phacochr/reference/phaco_setup_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"phaco_setup_data : Téléchargement et installation des données pour géocoder — phaco_setup_data","text":"","code":"if (FALSE) { phaco_setup_data() }"},{"path":"https://phacochr.github.io/phacochr/reference/snacks.html","id":null,"dir":"Reference","previous_headings":"","what":"Adresses des snacks à Bruxelles (2022) — snacks","title":"Adresses des snacks à Bruxelles (2022) — snacks","text":"Les noms et adresses des snacks (pita-durum) à Bruxelles","code":""},{"path":"https://phacochr.github.io/phacochr/reference/snacks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adresses des snacks à Bruxelles (2022) — snacks","text":"","code":"snacks"},{"path":[]},{"path":"https://phacochr.github.io/phacochr/reference/snacks.html","id":"snacks","dir":"Reference","previous_headings":"","what":"snacks","title":"Adresses des snacks à Bruxelles (2022) — snacks","text":"Un data frame avec 484 lignes et 4 colonnes : nom Le nom du snack rue La rue à laquelle est situé le snack num Le numéro de la rue code_postal Le code postal de l'adresse","code":""},{"path":"https://phacochr.github.io/phacochr/reference/snacks.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Adresses des snacks à Bruxelles (2022) — snacks","text":"https://analytics.brussels","code":""},{"path":"https://phacochr.github.io/phacochr/news/index.html","id":"phacochr-09114","dir":"Changelog","previous_headings":"","what":"phacochr 0.9.1.14","title":"phacochr 0.9.1.14","text":"Date : 5 mai 2023","code":""},{"path":"https://phacochr.github.io/phacochr/news/index.html","id":"modifications-majeures-0-9-1-14","dir":"Changelog","previous_headings":"","what":"Modifications majeures","title":"phacochr 0.9.1.14","text":"Ajout d’une correction des rues BeSTAddress dans la fonction phaco_best_data_update(). L’option est activée par défaut, car le formatage des données BeST n’est pas homogène : trouve parfois dans celles-ci des précisions entre parenthèses (notamment pour Charleroi), des abréviations (St. pour Saint, Av. pour Avenue), etc., ce qui nuit à la bonne détection des rues. L’option est désactivable via le nouvel argument corrections_REGEX de la fonction phaco_best_data_update().","code":""},{"path":[]},{"path":"https://phacochr.github.io/phacochr/news/index.html","id":"modifications-mineures-0-9-1-13","dir":"Changelog","previous_headings":"","what":"Modifications mineures","title":"phacochr 0.9.1.13","text":"Intégration au package du script map_process.R permettant de créer les géométries utilisées dans phaco_map() à partir des géométries des secteurs statistiques Statbel et des quartiers du monitoring Urbis (Bruxelles). Le script est situé dans le répertoire inst/scripts du package, et peut être appelé via la fonction system.file(). Par exemple, en exécutant la commande : source(paste0(system.file(\"scripts\", package = \"phacochr\"), \"/map_process.R\")). Le script est intégré par transparence des opérations effectuées, mais il ne semble pas utile d’en faire une fonction, la mise à jour des géométries n’étant pas une opération à réaliser régulièrement. Modification dans la manière de créer les géométries des quartiers du monitoring (Bruxelles). Auparavant, les frontières des quartiers étaient issues du fichier Urbis installé avec le package. Désormais, les géométries des quartiers du monitoring reposent sur les géométries des secteurs statistiques de Stabel, par cohérence avec la manière dont la table secteurs statistiques - quartiers du monitoring est créée par la fonction phaco_best_data_update(). Ce changement n’aucun impact sur le fonctionnement et les résultats de phacochr, car les géométries des quartiers du monitoring ne sont pas utilisées par les fonctions de phacochr. Cette modification modifie simplement le fichier vectoriel des quartiers du monitoring de Bruxelles disponible dans le répertoire d’installation de phacochr (le fichier C:\\Users\\USERNAME\\AppData\\Local\\phacochr\\phacochr\\data_phacochr\\STATBEL\\PREPROCESSED\\BXL_quartiers_PREPROCESSED.gpkg sous Windows). terme, il sera utile de créer une fonction rendant facilement disponible ces fichiers pour l’utilisateur.","code":""},{"path":"https://phacochr.github.io/phacochr/news/index.html","id":"phacochr-09112","dir":"Changelog","previous_headings":"","what":"phacochr 0.9.1.12","title":"phacochr 0.9.1.12","text":"Début de la mise à jour régulière du fichier NEWS.md pour documenter les modifications de phacochr.","code":""},{"path":"https://phacochr.github.io/phacochr/news/index.html","id":"modifications-mineures-0-9-1-12","dir":"Changelog","previous_headings":"","what":"Modifications mineures","title":"phacochr 0.9.1.12","text":"Ajout de ifelse() pour l’exécution des corrections orthographiques dans la fonction phaco_geocode(). Le temps de calcul pour le géocodage diminue de +/- 1%.","code":""}]
